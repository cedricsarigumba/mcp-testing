@startuml Pet Information API Sequence Diagram

!theme plain
skinparam responseMessageBelowArrow true
skinparam sequenceArrowThickness 2
skinparam roundcorner 10
skinparam maxMessageSize 200
skinparam sequenceParticipant {
    BackgroundColor WhiteSmoke
    BorderColor DarkGrey
    FontColor Black
}

title Pet Information REST API - Interaction Flow

actor Client
participant "API Gateway" as APIGateway
participant "Lambda Function\n(PetInfoFunction)" as Lambda
participant "DynamoDB\n(PetsTable)" as DynamoDB

== Request Processing ==

Client -> APIGateway: POST /api/pets (with pet JSON)
note right of Client
{
  "petName": "String",
  "type": "String (cat or dog)",
  "color": "String",
  "breed": "String",
  "gender": "String",
  "birthday": "String (YYYY-MM-DD)"
}
end note

APIGateway -> Lambda: Invoke Lambda with event object
note right of APIGateway
Event contains HTTP method, path,
headers, query parameters,
and request body
end note

== Data Processing ==

Lambda -> Lambda: Parse request body
Lambda -> Lambda: Validate input data
note right of Lambda
- Validate petName (non-empty string)
- Validate type (cat or dog, case-insensitive)
- Validate color (non-empty string)
- Validate breed (non-empty string)
- Validate gender (non-empty string)
- Validate birthday (YYYY-MM-DD format, valid date)
end note

alt Validation Failed
    Lambda --> APIGateway: Return 400 Bad Request with validation details
    APIGateway --> Client: 400 Bad Request JSON response
    note right of Client
    {
      "error": "Validation failed",
      "details": [
        { "field": "fieldName", "message": "Error message" }
      ]
    }
    end note
else Validation Successful
    Lambda -> Lambda: Generate petId (UUID)
    Lambda -> Lambda: Set timestamps (createdAt, updatedAt)

    Lambda -> DynamoDB: PutItem operation
    note right of Lambda
    {
      "petId": "generated-uuid",
      "petName": "...",
      "type": "...",
      "color": "...",
      "breed": "...",
      "gender": "...",
      "birthday": "...",
      "createdAt": "ISO timestamp",
      "updatedAt": "ISO timestamp"
    }
    end note

    alt DynamoDB Operation Successful
        DynamoDB --> Lambda: Success response
        Lambda --> APIGateway: Return 201 Created with petId
        APIGateway --> Client: 201 Created JSON response
        note right of Client
        {
          "petId": "generated-uuid-string",
          "message": "Pet information saved successfully."
        }
        end note
    else DynamoDB Operation Failed
        DynamoDB --> Lambda: Error response
        Lambda --> APIGateway: Return 500 Internal Server Error
        APIGateway --> Client: 500 Internal Server Error JSON response
        note right of Client
        {
          "error": "An internal server error occurred."
        }
        end note
    end
end

== Error Handling ==

group Centralized Error Handling (within Lambda)
    Lambda -> Lambda: Catch all unhandled errors
    Lambda --> APIGateway: Return appropriate error code and message
    APIGateway --> Client: Formatted error response
end

@enduml
